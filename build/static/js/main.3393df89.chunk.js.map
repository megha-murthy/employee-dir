{"version":3,"sources":["components/DirectoryPage.js","components/Form.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["DirectoryPage","props","className","scope","alt","name","src","image","phone","email","dob","Form","type","value","search","placeholder","onChange","handleInputChange","onSubmit","handleSubmit","Wrapper","children","Title","toggle","App","state","employees","handlesort","abc","cloneDeep","original","setState","empl","sort","a","b","firstname","event","console","log","preventDefault","target","handlefilter","emp","filter","person","toLowerCase","includes","this","bind","onClick","map","employee","id","key","fullname","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3393df89.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DirectoryPage(props){\n    return (\n        <table className=\"table table-striped\">\n        <tbody>\n          <tr>\n            <th scope=\"row\"></th>\n            <td className=\"column\" ><img className=\"imagetag\" alt={props.name} src={props.image} /></td>\n            <td className=\"column\">{props.name}</td>\n            <td className=\"column\">{props.phone}</td>\n            <td className=\"column\">{props.email}</td>\n            <td className=\"column\">{props.dob}</td>\n          </tr>\n        </tbody>\n     \n      </table>\n    )\n}\n\nexport default DirectoryPage;","import React from 'react';\n\nfunction Form(props){\n    return(\n        <div className=\"container\">\n            <form className=\"formtag\">\n                <input type=\"text\" value={props.search} placeholder=\"Search\" onChange={props.handleInputChange} onSubmit={props.handleSubmit} className=\"remove\"></input>\n            </form>\n\n    </div>\n    )\n  \n}\nexport default Form;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from 'react';\nimport './App.css';\nimport DirectoryPage from './components/DirectoryPage';\nimport employees from './employees.json'\nimport original from './original.json'\nimport Form from './components/Form'\nimport Wrapper from './components/Wrapper'\nimport Title from './components/Title'\nimport cloneDeep from 'lodash/cloneDeep';\n\n\nlet toggle=false;\n\nclass App extends React.Component {\n  state={\n    search: \"\",\n    employees\n  };\n\n  handlesort=()=>{ \n   \n    if(toggle){\n      const abc = cloneDeep(original)\n      this.setState({employees: abc})\n      toggle=false\n\n    }else{\n      const empl=this.state.employees.sort((a,b) => {\n      // this.setState({employees:employees})\n      // var upperA= a.firstname.toUpperCase();\n      // var upperB= b.firstname.toUpperCase();\n      if (a.firstname<b.firstname) return -1;\n      else if(a.firstname>b.firstname) return 1;\n      else return 0;\n  }); \n    toggle=true;\n\n    this.setState({employees:empl})\n  }\n\n    \n  }\n\n\n  handleInputChange=(event)=>{\n    console.log(\"Hii\")\n    this.setState({employees:employees});\n    event.preventDefault();\n    // let value=event.target.value;\n    this.setState({\n      search:event.target.value\n    },()=>this.handlefilter())\n\n  }\n\n  handlefilter=()=>{\n    // this.setState({employees:employees});\n    console.log(\"88888888\",this.state.search)\n    const emp= this.state.employees.filter(person=>person.firstname.toLowerCase().includes(this.state.search.toLowerCase()))\n    console.log(\"Befor state\",emp)\n    this.setState({employees:emp})\n    console.log(\"after state\",emp)\n  }\n\n  render(){\n    return (\n      <Wrapper>\n        <Title>Employee Directory\n        <p className=\"phead\">Click on carrot to filter by Name or use the search box to narrow your results</p>\n        </Title>\n        \n        <Form\n        handleInputChange={this.handleInputChange.bind(this)}\n        handleSubmit={this.handleSubmit}\n        search= {this.state.search}\n        \n        />\n        \n        <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\" className=\"columnimg\">Image</th>\n            <th scope=\"col\"className=\"column\"onClick={this.handlesort}>Name â–¼</th>\n            <th scope=\"col\"className=\"column\">Phone</th>\n            <th scope=\"col\"className=\"column\">Email</th>\n            <th scope=\"col\"className=\"column\">DOB</th>\n          </tr>\n        </thead>\n        </table>\n      {this.state.employees.map(employee=>(\n        <DirectoryPage\n        id={employee.id}\n        key={employee.id}\n        image={employee.image}\n        name={employee.fullname}\n        phone={employee.phone}\n        email={employee.email}\n        dob={employee.dob}\n        />\n      ))}\n    \n      </Wrapper>\n      );\n  }\n  \n  }\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}